// <auto-generated />
using System;
using Mc2.CrudTest.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Mc2.CrudTest.Infrastructure.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Mc2.CrudTest.Domain.Abstractions.Models.EventStream", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AggregateType")
                        .IsRequired()
                        .HasColumnType("varchar(64)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Events")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<int>("Version")
                        .IsConcurrencyToken()
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("EventStreams");
                });

            modelBuilder.Entity("Mc2.CrudTest.Domain.Aggregates.CustomerAggregate.ReadModels.CustomerReadModel", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("date");

                    b.Property<string>("FirstName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("FirstName", "LastName", "DateOfBirth")
                        .IsUnique()
                        .HasFilter("[FirstName] IS NOT NULL");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("Mc2.CrudTest.Domain.Aggregates.CustomerAggregate.ReadModels.CustomerReadModel", b =>
                {
                    b.OwnsOne("Mc2.CrudTest.Domain.Aggregates.CustomerAggregate.ValueObjects.BankAccountNumber", "BankAccountNumber", b1 =>
                        {
                            b1.Property<Guid>("CustomerReadModelId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("varchar(64)")
                                .HasColumnName("BankAccountNumber");

                            b1.HasKey("CustomerReadModelId");

                            b1.HasIndex("Value");

                            b1.ToTable("Customers");

                            b1.WithOwner()
                                .HasForeignKey("CustomerReadModelId");
                        });

                    b.OwnsOne("Mc2.CrudTest.Domain.Aggregates.CustomerAggregate.ValueObjects.Email", "Email", b1 =>
                        {
                            b1.Property<Guid>("CustomerReadModelId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("varchar(64)")
                                .HasColumnName("Email");

                            b1.HasKey("CustomerReadModelId");

                            b1.HasIndex("Value")
                                .IsUnique();

                            b1.ToTable("Customers");

                            b1.WithOwner()
                                .HasForeignKey("CustomerReadModelId");
                        });

                    b.OwnsOne("Mc2.CrudTest.Domain.Aggregates.CustomerAggregate.ValueObjects.PhoneNumber", "PhoneNumber", b1 =>
                        {
                            b1.Property<Guid>("CustomerReadModelId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("varchar(20)")
                                .HasColumnName("PhoneNumber");

                            b1.HasKey("CustomerReadModelId");

                            b1.HasIndex("Value");

                            b1.ToTable("Customers");

                            b1.WithOwner()
                                .HasForeignKey("CustomerReadModelId");
                        });

                    b.Navigation("BankAccountNumber")
                        .IsRequired();

                    b.Navigation("Email")
                        .IsRequired();

                    b.Navigation("PhoneNumber")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
